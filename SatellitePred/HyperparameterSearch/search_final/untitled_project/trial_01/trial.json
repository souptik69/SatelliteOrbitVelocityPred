{"trial_id": "01", "hyperparameters": {"space": [{"class_name": "Choice", "config": {"name": "num_filters", "default": 12, "conditions": [], "values": [12, 16], "ordered": true}}, {"class_name": "Choice", "config": {"name": "kernel_size", "default": 3, "conditions": [], "values": [3, 5, 9, 13], "ordered": true}}, {"class_name": "Choice", "config": {"name": "dilation_base", "default": 2, "conditions": [], "values": [2], "ordered": true}}, {"class_name": "Choice", "config": {"name": "dropout_rate", "default": 0.3, "conditions": [], "values": [0.3], "ordered": true}}, {"class_name": "Choice", "config": {"name": "key_value_size", "default": 6, "conditions": [], "values": [6, 8], "ordered": true}}, {"class_name": "Choice", "config": {"name": "num_attention_heads", "default": 1, "conditions": [], "values": [1, 2], "ordered": true}}, {"class_name": "Choice", "config": {"name": "neurons_output", "default": 16, "conditions": [], "values": [16], "ordered": true}}, {"class_name": "Choice", "config": {"name": "activation", "default": "elu", "conditions": [], "values": ["elu"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "kernel_initializer", "default": "he_normal", "conditions": [], "values": ["he_normal"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "batch_norm_tcn", "default": 0, "conditions": [], "values": [0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "layer_norm_tcn", "default": 1, "conditions": [], "values": [1], "ordered": true}}, {"class_name": "Choice", "config": {"name": "padding_encoder", "default": "same", "conditions": [], "values": ["same", "causal"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "padding_decoder", "default": "causal", "conditions": [], "values": ["causal"], "ordered": false}}], "values": {"num_filters": 16, "kernel_size": 9, "dilation_base": 2, "dropout_rate": 0.3, "key_value_size": 8, "num_attention_heads": 2, "neurons_output": 16, "activation": "elu", "kernel_initializer": "he_normal", "batch_norm_tcn": 0, "layer_norm_tcn": 1, "padding_encoder": "same", "padding_decoder": "causal"}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\engine\\base_tuner.py\", line 270, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\engine\\base_tuner.py\", line 235, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\engine\\tuner.py\", line 287, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\engine\\tuner.py\", line 214, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\engine\\hypermodel.py\", line 144, in fit\n    return model.fit(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"C:\\Users\\ssen\\AppData\\Local\\Temp\\__autograph_generated_fileb4cdu7kh.py\", line 18, in tf__train_function\n    raise\n  File \"C:\\Users\\ssen\\AppData\\Local\\Temp\\__autograph_generated_fileephyeqps.py\", line 34, in tf__call\n    ag__.if_stmt(ag__.ld(self).autoregressive, if_body, else_body, get_state, set_state, ('predictions',), 1)\n  File \"C:\\Users\\ssen\\AppData\\Local\\Temp\\__autograph_generated_fileephyeqps.py\", line 26, in else_body\n    x_encoder, x_decoder = ag__.ld(inputs)\n    ^^^^^^^^^^^^^^^^^^^^\nValueError: in user code:\n\n    File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\engine\\training.py\", line 1284, in train_function  *\n        return step_function(self, iterator)\n    File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\engine\\training.py\", line 1268, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\engine\\training.py\", line 1249, in run_step  **\n        outputs = model.train_step(data)\n    File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\engine\\training.py\", line 1050, in train_step\n        y_pred = self(x, training=True)\n    File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 70, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"C:\\Users\\ssen\\AppData\\Local\\Temp\\__autograph_generated_fileephyeqps.py\", line 34, in tf__call\n        ag__.if_stmt(ag__.ld(self).autoregressive, if_body, else_body, get_state, set_state, ('predictions',), 1)\n    File \"C:\\Users\\ssen\\AppData\\Local\\Temp\\__autograph_generated_fileephyeqps.py\", line 26, in else_body\n        x_encoder, x_decoder = ag__.ld(inputs)\n\n    ValueError: Exception encountered when calling layer 'tcn_tcn_attention' (type TCN_TCN_attention).\n    \n    in user code:\n    \n        File \"c:\\Users\\ssen\\Documents\\COOPERANTS\\satelliteprediction-playground\\SatellitePred\\EncoderDecoder\\src\\tcn_sequence_models\\tf_models\\tf_TCN_TCN_attention\\tcn_tcn_attention.py\", line 127, in call  *\n            x_encoder, x_decoder = inputs\n    \n        ValueError: too many values to unpack (expected 2)\n    \n    \n    Call arguments received by layer 'tcn_tcn_attention' (type TCN_TCN_attention):\n      \u2022 inputs=('tf.Tensor(shape=(None, 120, 18), dtype=float32)', 'tf.Tensor(shape=(None, 30, 6), dtype=float32)', 'tf.Tensor(shape=(None, 30, 6), dtype=float32)')\n      \u2022 training=True\n\n"}