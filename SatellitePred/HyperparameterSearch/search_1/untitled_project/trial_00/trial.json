{"trial_id": "00", "hyperparameters": {"space": [{"class_name": "Choice", "config": {"name": "num_filters", "default": 8, "conditions": [], "values": [8, 12], "ordered": true}}, {"class_name": "Choice", "config": {"name": "kernel_size", "default": 5, "conditions": [], "values": [5, 9, 13, 17], "ordered": true}}, {"class_name": "Choice", "config": {"name": "dilation_base", "default": 2, "conditions": [], "values": [2], "ordered": true}}, {"class_name": "Choice", "config": {"name": "dropout_rate", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3], "ordered": true}}, {"class_name": "Choice", "config": {"name": "key_value_size", "default": 4, "conditions": [], "values": [4, 6, 8], "ordered": true}}, {"class_name": "Choice", "config": {"name": "num_attention_heads", "default": 1, "conditions": [], "values": [1, 2], "ordered": true}}, {"class_name": "Choice", "config": {"name": "neurons_output", "default": 16, "conditions": [], "values": [16], "ordered": true}}, {"class_name": "Choice", "config": {"name": "activation", "default": "elu", "conditions": [], "values": ["elu"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "kernel_initializer", "default": "he_normal", "conditions": [], "values": ["he_normal"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "batch_norm_tcn", "default": 0, "conditions": [], "values": [0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "layer_norm_tcn", "default": 1, "conditions": [], "values": [1], "ordered": true}}, {"class_name": "Choice", "config": {"name": "padding_encoder", "default": "same", "conditions": [], "values": ["same", "causal"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "padding_decoder", "default": "same", "conditions": [], "values": ["same", "causal"], "ordered": false}}], "values": {"num_filters": 12, "kernel_size": 9, "dilation_base": 2, "dropout_rate": 0.3, "key_value_size": 6, "num_attention_heads": 2, "neurons_output": 16, "activation": "elu", "kernel_initializer": "he_normal", "batch_norm_tcn": 0, "layer_norm_tcn": 1, "padding_encoder": "same", "padding_decoder": "causal"}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\engine\\base_tuner.py\", line 270, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\engine\\base_tuner.py\", line 235, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\engine\\tuner.py\", line 287, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\engine\\tuner.py\", line 214, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\engine\\hypermodel.py\", line 144, in fit\n    return model.fit(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"C:\\Users\\ssen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\engine\\data_adapter.py\", line 268, in __init__\n    self._size = int(math.ceil(num_samples / batch_size))\n                               ~~~~~~~~~~~~^~~~~~~~~~~~\nTypeError: unsupported operand type(s) for /: 'int' and 'list'\n"}